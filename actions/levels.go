package actions

import (
	"database/sql"
	"net/http"

	"github.com/dgrijalva/jwt-go"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gofrs/uuid"
	"github.com/pkg/errors"
	"github.com/wyntre/rpg_api/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Level)
// DB Table: Plural (levels)
// Resource: Plural (Levels)
// Path: Plural (/levels)
// View Template Folder: Plural (/templates/levels/)

// LevelsResource is the resource for the Level model
type LevelsResource struct {
	buffalo.Resource
}

// List gets all Levels. This function is levelped to the path
// GET /levels/{quest_id}
func (v LevelsResource) List(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	mapID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad quest id"))
	}

	rpgMap := &models.Map{}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Retrieve all Levels from the DB
	if err := tx.Eager("Levels").Where("user_id = ?", userID).Find(rpgMap, mapID); err != nil {
		return c.Error(http.StatusNotFound, errors.New("levels not found"))
	}

	return c.Render(http.StatusOK, r.JSON(map[string]models.Levels{
		"levels": rpgMap.Levels,
	}))
}

// Show gets the data for one Level. This function is levelped to
// the path GET /levels/:id
func (v LevelsResource) Show(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	levelID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad level id"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Level
	level := &models.Level{}

	// To find the Level the parameter level_id is used.
	if err := tx.Eager().Where("user_id = ?", userID).Find(level, levelID); err != nil {
		return c.Error(http.StatusNotFound, errors.New("level not found"))
	}

	return c.Render(200, r.JSON(level))
}

// Create adds a Level to the DB. This function is levelped to the
// path POST /levels
func (v LevelsResource) Create(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	// Allocate an empty Level
	level := &models.Level{}

	// Bind level to the html form elements
	if err := c.Bind(level); err != nil {
		return err
	}

	level.UserID = userID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Get Level of Highest Sort Order
	lastLevel := &models.Level{}
	err = tx.Where("user_id = ?", userID).Where("map_id = ?", level.MapID).Order("sort_order desc").First(lastLevel)
	if err != nil {
		if errors.Cause(err) != sql.ErrNoRows {
			c.Logger().Error(err)
			return errors.New("transaction error")
		}
	}

	// lastLevel.SortOrder defaults to 0 if no levels found
	level.SortOrder = lastLevel.SortOrder + 1

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(level)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Error(http.StatusUnprocessableEntity, verrs)
	}

	return c.Render(http.StatusCreated, r.JSON(level))
}

// Update changes a Level in the DB. This function is levelped to
// the path PUT /levels/:id
func (v LevelsResource) Update(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	user, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	levelID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad level id"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Level
	level := &models.Level{}

	level.UserID = user

	if err := tx.Where("user_id = ?", user).Find(level, levelID); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Level to the html form elements
	if err := c.Bind(level); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(level)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Error(http.StatusUnprocessableEntity, verrs)
	}

	return c.Render(http.StatusOK, r.JSON(level))
}

// Destroy deletes a Level from the DB. This function is levelped
// to the path DELETE /levels/{level_id}
func (v LevelsResource) Destroy(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	user, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	levelID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad level id"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Level
	level := &models.Level{}

	// To find the Level the parameter level_id is used.
	if err := tx.Where("user_id = ?", user).Find(level, levelID); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(level); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(level))
}
