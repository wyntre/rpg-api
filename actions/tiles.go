package actions

import (
	"net/http"

	"github.com/dgrijalva/jwt-go"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gofrs/uuid"
	"github.com/pkg/errors"
	"github.com/wyntre/rpg_api/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Tile)
// DB Table: Plural (Tiles)
// Resource: Plural (Tiles)
// Path: Plural (/Tiles)
// View Template Folder: Plural (/templates/Tiles/)

// TilesResource is the resource for the Tile model
type TilesResource struct {
	buffalo.Resource
}

// List gets all tiles for a set level
// URI: /v1/levels/:id/tiles
// Method: GET
//
// Return:
//   Success: 200, tiles JSON
//   Error: 404, 500
func (v TilesResource) List(c buffalo.Context) error {
	// Get userID from JWT claims
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	// Get levelID from :id parameter in URL
	levelID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad level id"))
	}

	level := &models.Level{}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Get Tiles from Levels interface from database
	if err := tx.Eager().Where("user_id = ?", userID).Find(level, levelID); err != nil {
		return c.Error(http.StatusNotFound, errors.New("tiles not found"))
	}

	// Return Tiles in a JSON object
	return c.Render(http.StatusOK, r.JSON(map[string]models.Tiles{
		"tiles": level.Tiles,
	}))
}

// Show gets a single tile
//
func (v TilesResource) Show(c buffalo.Context) error {
	// Get userID from JWT claims
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	tileID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad tile id"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Tile
	tile := &models.Tile{}

	// To find the Tile the parameter tileID is used.
	if err := tx.Eager().Where("user_id = ?", userID).Find(tile, tileID); err != nil {
		return c.Error(http.StatusNotFound, errors.New("tile not found"))
	}

	return c.Render(http.StatusOK, r.JSON(tile))
}

// Create adds a Tile to the DB. This function is Tileped to the
// path POST /Tiles
func (v TilesResource) Create(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	// Allocate an empty Tile
	tile := &models.Tile{}
	// Bind Tile to the html form elements
	if err := c.Bind(tile); err != nil {
		return err
	}

	tile.UserID = userID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(tile)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Error(http.StatusUnprocessableEntity, verrs)
	}

	return c.Render(http.StatusCreated, r.JSON(tile))
}

// Update changes a Tile in the DB. This function is Tileped to
// the path PUT /Tiles/{tileID}
func (v TilesResource) Update(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	tileID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad tile id"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	tile := &models.Tile{}

	if err := tx.Where("user_id = ?", userID).Find(tile, tileID); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Tile to the html form elements
	if err := c.Bind(tile); err != nil {
		return err
	}

	tile.ID = tileID

	verrs, err := tx.ValidateAndUpdate(tile)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Error(http.StatusUnprocessableEntity, verrs)
	}

	return c.Render(http.StatusAccepted, r.JSON(tile))
}

// Destroy deletes a Tile from the DB. This function is Tileped
// to the path DELETE /Tiles/{tileID}
func (v TilesResource) Destroy(c buffalo.Context) error {
	claims := c.Value("claims").(jwt.MapClaims)
	userID, err := uuid.FromString(claims["id"].(string))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad user id"))
	}

	tileID, err := uuid.FromString(c.Param("id"))
	if err != nil {
		return c.Error(http.StatusInternalServerError, errors.New("bad tile id"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Tile
	tile := &models.Tile{}

	// To find the Tile the parameter tileID is used.
	if err := tx.Where("user_id = ?", userID).Find(tile, tileID); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(tile); err != nil {
		return err
	}

	return c.Render(http.StatusAccepted, r.JSON(tile))
}
